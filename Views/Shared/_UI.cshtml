@using G_APIs.Models
@using G_APIs.Services
@{
    Layout = null;
}

@ProcessToasts()

@helper ProcessToasts()
{
    List<MessageContext> toasts = AlertMessaging.GetAndRemoveUserQueue();
    if (toasts != null && toasts.Count > 0)
    {
        foreach (var item in toasts)
        {
            @ShowToastr(item);
        }
    }
}

@helper ShowToastr(MessageContext item)
{
    switch (item.Type)
    {
        case MessageType.Info:
            @ToastrInfo(item.Message, item.Title)
            break;
        case MessageType.Success:
            @ToastrSuccess(item.Message, item.Title)
            break;
        case MessageType.Warning:
            @ToastrWarning(item.Message, item.Title)
            break;
        case MessageType.Error:
            @ToastrError(item.Message, item.Title);
            break;
    }
}

@helper ToastrInfo(string message, string title)
{
    <script>
        toast({
            type: 'info',
            title: "@message",
        });
    </script>
}

@helper ToastrSuccess(string message, string title)
{
    <script>
        toast({
            type: 'success',
            title: "@message",
        });
    </script>
}

@helper ToastrWarning(string message, string title)
{
    <script>
        toast({
            type: 'warning',
            title: "@message",
        });
    </script>
}

@helper ToastrError(string message, string title)
{
    <script>
        toast({
            type: 'error',
            title: "@message",
        });
    </script>
}